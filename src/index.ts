import { Api, TelegramClient } from "telegram";
import { StringSession } from "telegram/sessions";

import { conf } from "./config";
import { formatDate, isMessageRecent, containsKeywords, getCode, getNumber} from  "./helpers";

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Telegram
const client = new TelegramClient(
    new StringSession(""),
    conf.apiId,
    conf.apiHash,
    {
        connectionRetries: 5
    }
);


// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
export function logFoundMessage(message: Api.Message, sender: Api.User, groupInfo: Api.Chat) {
    const messageDate = new Date(message.date * 1000);
    const divider = '='.repeat(50);
    
    console.log(`\n${divider}`);
    console.log('üìù –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
    console.log(`üïí –î–∞—Ç–∞: ${formatDate(messageDate)}`);
    console.log(`üë• –ì—Ä—É–ø–ø–∞: ${groupInfo.title} (${groupInfo.id})`);
    console.log(`üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${sender.firstName || ''} ${sender.lastName || ''}`);
    console.log(`üì± Username: @${sender.username || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
    console.log(`üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${sender.id}`);
    console.log('\nüìÑ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:');
    console.log(message.text);
    console.log(divider + '\n');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async function parseMessages() {
    try {
        await client.connect();
        console.log('üîç –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞...');

        for (const groupId of conf.targetGroups) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
                const groupInfo = await client.getEntity(groupId);
                console.log(`üì• –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø—ã: ${groupInfo.id}`);

                const messages = await client.getMessages(groupId, {
                    limit: 100 // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                });

                for (const message of messages) {
                    if (!message.text || !message.fromId) continue;

                    if (isMessageRecent(message) && containsKeywords(message.text)) {
                        try {
                            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                            const sender = await client.getEntity(message.fromId);
                            
                            // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            logFoundMessage(message, sender as Api.User, groupInfo as Api.Chat);
                            
                            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                            await new Promise(resolve => setTimeout(resolve, 1000));
                        } catch (err) {
                            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: ${err}`);
                        }
                    }
                }
            } catch (err) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã ${groupId}: ${err}`);
            }
        }
        
        console.log('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω');
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ:', err);
    }
}

// –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞
async function startBot() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...');

    await client.start({
        phoneNumber: async () => await getNumber(),
        phoneCode: async () => await getCode(),
        onError: (err) => console.log(err),
      });
    
      await client.connect();
    
    try {
        console.log('‚úÖ –ü–∞—Ä—Å–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥
        await parseMessages();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        setInterval(parseMessages, 30 * 60 * 1000);
        
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–µ—Ä–∞:', err);
        process.exit(1);
    }
}

startBot();